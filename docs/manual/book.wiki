
<div class="maketitle">
    <h2 class="titleHead">Mongrel2 Manual<br>
    Installing, Deploying, Managing, Hacking</h2>

    <div class="author">
      <span class="pplr7t-x-x-120">Zed A. Shaw</span>
    </div><br>

    <div class="date">
      <span class="pplr7t-x-x-120">July 2010</span>
    </div>
  </div><!--l. 17-->

  <p class="indent">

  <h2 class="likechapterHead"><a id="x1-1000" name=
  "x1-1000"></a>Contents</h2>

  <div class="tableofcontents">
    <span class="chapterToc">1 <a href="#x1-40001" id="QQ2-1-4"
    name="QQ2-1-4">Introduction</a></span><br>
    &nbsp;<span class="sectionToc">1.1 <a href="#x1-50001.1" id=
    "QQ2-1-5" name="QQ2-1-5">Language Agnostic</a></span><br>
    &nbsp;<span class="sectionToc">1.2 <a href="#x1-60001.2" id=
    "QQ2-1-6" name="QQ2-1-6">Asynchronous</a></span><br>
    &nbsp;<span class="sectionToc">1.3 <a href="#x1-70001.3" id=
    "QQ2-1-7" name="QQ2-1-7">Message Protocol</a></span><br>
    &nbsp;<span class="sectionToc">1.4 <a href="#x1-80001.4" id=
    "QQ2-1-8" name="QQ2-1-8">Application Oriented</a></span><br>
    &nbsp;<span class="sectionToc">1.5 <a href="#x1-90001.5" id=
    "QQ2-1-9" name="QQ2-1-9">Automated Management</a></span><br>
    &nbsp;<span class="sectionToc">1.6 <a href="#x1-100001.6" id=
    "QQ2-1-10" name="QQ2-1-10">Using This Manual</a></span><br>
    <span class="chapterToc">2 <a href="#x1-110002" id="QQ2-1-11"
    name="QQ2-1-11">Installing</a></span><br>
    &nbsp;<span class="sectionToc">2.1 <a href="#x1-120002.1" id=
    "QQ2-1-12" name="QQ2-1-12">Install Dependencies</a></span><br>
    &nbsp;<span class="sectionToc">2.2 <a href="#x1-130002.2" id=
    "QQ2-1-14" name="QQ2-1-14">Building Mongrel2</a></span><br>
    &nbsp;&nbsp;<span class="subsectionToc">2.2.1 <a href=
    "#x1-140002.2.1" id="QQ2-1-15" name="QQ2-1-15">Using
    Fossil</a></span><br>
    &nbsp;&nbsp;<span class="subsectionToc">2.2.2 <a href=
    "#x1-150002.2.2" id="QQ2-1-17" name="QQ2-1-17">Using The .zip
    File</a></span><br>
    &nbsp;<span class="sectionToc">2.3 <a href="#x1-160002.3" id=
    "QQ2-1-18" name="QQ2-1-18">Building And
    Installing</a></span><br>
    &nbsp;<span class="sectionToc">2.4 <a href="#x1-170002.4" id=
    "QQ2-1-20" name="QQ2-1-20">Testing The
    Installation</a></span><br>
    &nbsp;<span class="sectionToc">2.5 <a href="#x1-180002.5" id=
    "QQ2-1-22" name="QQ2-1-22">Up Next</a></span><br>
    <span class="chapterToc">3 <a href="#x1-190003" id="QQ2-1-23"
    name="QQ2-1-23">Deploying</a></span><br>
    &nbsp;<span class="sectionToc">3.1 <a href="#x1-200003.1" id=
    "QQ2-1-25" name="QQ2-1-25">Model-View-Controller</a></span><br>
    &nbsp;<span class="sectionToc">3.2 <a href="#x1-210003.2" id=
    "QQ2-1-26" name="QQ2-1-26">Trying m2sh</a></span><br>
    &nbsp;&nbsp;<span class="subsectionToc">3.2.1 <a href=
    "#x1-220003.2.1" id="QQ2-1-29" name="QQ2-1-29">What The Hell
    Just Happened?</a></span><br>
    &nbsp;<span class="sectionToc">3.3 <a href="#x1-230003.3" id=
    "QQ2-1-30" name="QQ2-1-30">A Simple Configuration
    File</a></span><br>
    &nbsp;<span class="sectionToc">3.4 <a href="#x1-240003.4" id=
    "QQ2-1-33" name="QQ2-1-33">How A Config Is
    Structured</a></span><br>
    &nbsp;&nbsp;<span class="subsectionToc">3.4.1 <a href=
    "#x1-250003.4.1" id="QQ2-1-34" name=
    "QQ2-1-34">Server</a></span><br>
    &nbsp;&nbsp;<span class="subsectionToc">3.4.2 <a href=
    "#x1-260003.4.2" id="QQ2-1-35" name=
    "QQ2-1-35">Host</a></span><br>
    &nbsp;&nbsp;<span class="subsectionToc">3.4.3 <a href=
    "#x1-270003.4.3" id="QQ2-1-36" name=
    "QQ2-1-36">Route</a></span><br>
    &nbsp;&nbsp;<span class="subsectionToc">3.4.4 <a href=
    "#x1-280003.4.4" id="QQ2-1-37" name=
    "QQ2-1-37">Dir</a></span><br>
    &nbsp;&nbsp;<span class="subsectionToc">3.4.5 <a href=
    "#x1-290003.4.5" id="QQ2-1-38" name=
    "QQ2-1-38">Proxy</a></span><br>
    &nbsp;&nbsp;<span class="subsectionToc">3.4.6 <a href=
    "#x1-300003.4.6" id="QQ2-1-39" name=
    "QQ2-1-39">Handler</a></span><br>
    &nbsp;&nbsp;<span class="subsectionToc">3.4.7 <a href=
    "#x1-310003.4.7" id="QQ2-1-40" name=
    "QQ2-1-40">Others</a></span><br>
    &nbsp;<span class="sectionToc">3.5 <a href="#x1-320003.5" id=
    "QQ2-1-41" name="QQ2-1-41">A More Complex
    Example</a></span><br>
    &nbsp;<span class="sectionToc">3.6 <a href="#x1-330003.6" id=
    "QQ2-1-43" name="QQ2-1-43">Routing And Host
    Patterns</a></span><br>
    &nbsp;<span class="sectionToc">3.7 <a href="#x1-340003.7" id=
    "QQ2-1-44" name="QQ2-1-44">Deployment Logs And
    Commits</a></span><br>
    <span class="chapterToc">4 <a href="#x1-350004" id="QQ2-1-45"
    name="QQ2-1-45">Managing</a></span><br>
    &nbsp;<span class="sectionToc">4.1 <a href="#x1-360004.1" id=
    "QQ2-1-46" name="QQ2-1-46">More Advanced m2sh</a></span><br>
    <span class="chapterToc">5 <a href="#x1-370005" id="QQ2-1-47"
    name="QQ2-1-47">Hacking</a></span><br>
    &nbsp;<span class="sectionToc">5.1 <a href="#x1-380005.1" id=
    "QQ2-1-48" name="QQ2-1-48">Writing Your Own m2sh</a></span><br>
    <span class="chapterToc">6 <a href="#x1-390006" id="QQ2-1-49"
    name="QQ2-1-49">Contributing</a></span>
  </div><!--l. 1-->

  <p class="indent">

  <h2 class="likechapterHead"><a id="x1-2000" name=
  "x1-2000"></a>Preface</h2><!--l. 3-->

  <p class="noindent">This manual will tell you about the most
  awesome webserver on the planet: Mongrel2. It is written for
  people with a sense of humor who want to get things done with
  Mongrel2. That means if you&rsquo;re an operations professional,
  software developer, hacker, or just curious it&rsquo;s for you.
  However, if you&rsquo;re too serious and think &rdquo;flowery
  language&rdquo; (aka good entertaining writing) does not belong
  in your software manuals then you should just go read the source
  code and save everyone a huge headache dealing with you. 
  <!--l. 11-->

  <p class="indent">In case you haven&rsquo;t figured it out, this
  book will be fun and slightly obnoxious. That&rsquo;s not
  intended to insult you, but just to keep you interested so that
  you want to read it.

  <h3 class="likesectionHead"><a id="x1-3000" name=
  "x1-3000"></a>Typography</h3><!--l. 18-->

  <p class="noindent">Usually the people running the web can be
  divided into three types of people: Steves, Edsgers, and Knuths. 
  <!--l. 21-->

  <p class="indent">The Steves think that the entire internet
  should be a wonderful user experience where all pages are crafted
  with pixel perfect fonts with high gloss visuals and coated with
  the most happy happy joy joy of all possible experiences. To them
  design is paramount and actual stability isn&rsquo;t important
  unless it interferes with design. The Steves of the internet
  think the Edsgers of internet are destroying the universe with
  things like &rdquo;functionality&rdquo;, &rdquo;security&rdquo;,
  and &rdquo;stability&rdquo;. Just like the real Steve Jobs, they
  would rather everything look fantastic and then use awesome
  marketing to cover up any technical flaws. <!--l. 31-->

  <p class="indent">The Edsgers feel that the internet is
  completely unsafe and until it is a fully curate and crafted set
  of academic peer reviewed papers it will be a festering pile of
  dung. To the Edsgers the world is dangerous and only a truly
  paranoid attitude toward security and stability will ensure that
  it becomes safe. They want every single piece of software to
  reject all reality and be crafted from nothing but pure
  mathematics, and hate the fact that the Steves want to run around
  painting the world with useless frivolous colors and words and
  things that lead to ambiguity and happiness. <!--l. 40-->

  <p class="indent">The typography in this book, and the entire
  project, is for the Knuths of the world. I like to think of the
  Knuths as the practical yet professional types with a light sense
  of humor. They are the ones who are getting things done while
  still balancing between great typography and solid bug free
  functionality. They aren&rsquo;t zealots but practical straight
  forward type of people. <!--l. 47-->

  <p class="indent">That is why this book is written in TeX and why
  it uses whatever fonts TeX uses.

  <h2 class="chapterHead"><span class=
  "titlemark">Chapter&nbsp;1</span><br>
  <a id="x1-40001" name="x1-40001"></a>Introduction</h2><!--l. 3-->

  <p class="noindent">Mongrel2 is a web server. HTTP requests come
  in, HTTP responses go out. Request, response. There is nothing
  revolutionary or extravagant in what Mongrel2 does with a
  browser, apart from supporting fancy asynchronous socket
  protocols. To the browser, Mongrel2 is just this nice web server
  that has WebSockets and Flash Sockets in it. That&rsquo;s it. 
  <!--l. 9-->

  <p class="indent">What makes Mongrel2 special is how it satisfies
  these requests in a <span class="pplri7t-">language</span>
  <span class="pplri7t-">agnostic</span> and <span class=
  "pplri7t-">asynchronous</span> way using a <span class=
  "pplri7t-">simple messaging protocol</span> to talk to
  <span class="pplri7t-">applications</span> not just serve files.
  Mongrel2 is also designed to be incredibly easy to <span class=
  "pplri7t-">automatically</span> <span class=
  "pplri7t-">manage</span> it as part of your infrastructure. 
  <!--l. 15-->

  <p class="indent">Other web servers do some of these things, but
  they either do them in a bastardized way or not all of them at
  once. Plenty of language specific web servers like Node.js and
  Jetty have asynchronous operation, but then they&rsquo;re not
  language agnostic <span class="footnote-mark"><a href=
  "book-final2.html#fn1x2"><sup class=
  "textsuperscript">1</sup></a></span><a id="x1-4001f1" name=
  "x1-4001f1"></a>. Other web servers will let you talk to any
  language as a backend, but they insist on using HTTP proxying or
  FastCGI which is <span class="pplri7t-">not</span> friendly to
  asynchronous operations. <!--l. 22-->

  <p class="indent">Mongrel2 is the only web server I know of that
  actively tries to focus on these features as a cohesive whole.

  <h3 class="sectionHead"><span class="titlemark">1.1</span> <a id=
  "x1-50001.1" name="x1-50001.1"></a>Language Agnostic</h3>
  <!--l. 28-->

  <p class="noindent">The term &rdquo;language agnostic&rdquo; came
  from people who read about Mongrel2 in the early days and it
  means that Mongrel2 does <span class="pplri7t-">not</span> try to
  promote or any one language over any others. Mongrel2 does not
  care if you run a &rdquo;Python shop&rdquo; or if you&rsquo;re a
  die hard PHP fan or if you hate PHP and love only Ruby on Rails.
  Mongrel2 only knows about HTTP requests, HTTP responses, async
  messages, and getting them to your gear to meet those
  requirements. <!--l. 35-->

  <p class="indent">Language Agnosticism is the most important
  feature of Mongrel2 and it&rsquo;s entire purpose stems from the
  desire to reduce the amount of programming language religion in
  the world. Real people want to get things done, not wanker on
  which technology is the best or force other people to use their
  favorite toys. Instead Mongrel2 works to just be great for every
  language and make it easy to use what works best for a given
  problem. <!--l. 43-->

  <p class="noindent">

  <h3 class="sectionHead"><span class="titlemark">1.2</span> <a id=
  "x1-60001.2" name="x1-60001.2"></a>Asynchronous</h3><!--l. 45-->

  <p class="noindent">Many web servers are
  &rdquo;asynchronous&rdquo; internally, and some others force you
  to know way too much about how they work internally to get
  anything done. What makes Mongrel2&rsquo;s version of
  asynchronous messaging different is it extends to <span class=
  "pplri7t-">outside</span> the Mongrel2 server. This is a powerful
  concept that even your backends can operate asynchronously using
  simple identification of connected clients. <!--l. 51-->

  <p class="indent">Other servers assume that every request is
  received by a browser, then sent to a backend, and then directly
  sent out to the client and that&rsquo;s it. Mongrel2 assumes that
  there is a connected client, and it sends requests to backends,
  but it makes no assumptions about how those backends respond to
  the clients. All it requires is that the backend application send
  messages addressed to the client and it will write them on the
  socket. <!--l. 58-->

  <p class="indent">Because of this design Mongrel2 can easily
  house both classic HTTP clients, keep-alive style HTTP client,
  chunked encoding responses, JSSockets, or WebSockets using the
  same code. <!--l. 63-->

  <p class="noindent">

  <h3 class="sectionHead"><span class="titlemark">1.3</span> <a id=
  "x1-70001.3" name="x1-70001.3"></a>Message Protocol</h3>
  <!--l. 65-->

  <p class="noindent">In order to properly do asynchronous
  messaging in a language agnostic way, Mongrel2 needed a good base
  protocol that allowed for different messaging styles and worked
  with many different languages. HTTP proxying already does this,
  although it&rsquo;s not asynchronous at all. What gives Mongrel2
  its special powers is ZeroMQ, a language and transport mechanism
  agnostic messaging system that does <span class=
  "pplri7t-">not</span> require a centralized messaging server to
  operate. <!--l. 72-->

  <p class="indent">Using ZeroMQ lets Mongrel2 talk to a huge
  number of languages, operate within any kind of network
  architecture, and do it with a very simple communication model
  and API that most programmers can understand. <!--l. 77-->

  <p class="noindent">

  <h3 class="sectionHead"><span class="titlemark">1.4</span> <a id=
  "x1-80001.4" name="x1-80001.4"></a>Application Oriented</h3>
  <!--l. 79-->

  <p class="noindent">Web servers today are written as if it was
  still 1995 and all anyone needs to do is serve files, maybe some
  graphics. Today&rsquo;s web applications are not about serving
  files, they&rsquo;re about serving application logic <span class=
  "pplri7t-">and</span> doing it asynchronously. The advent of the
  bewildering numbers of ways to hack HTTP into an async messaging
  protocol<span class="footnote-mark"><a href=
  "book-final3.html#fn2x2"><sup class=
  "textsuperscript">2</sup></a></span><a id="x1-8001f2" name=
  "x1-8001f2"></a> is proof enough that the pressure is on for web
  server to be for applications with highly interactive interfaces.
  <!--l. 87-->

  <p class="indent">Mongrel2 can still serve files just fine. In
  fact, it&rsquo;s got very accurate and easy to understand file
  serving code. However, Mongrel2 will always be about
  applications. Fast scalable awesome asynchronous or synchronous
  applications that need to use languages that mere mortals can
  work with like PHP. If there&rsquo;s ever a choice, apps win.

  <h3 class="sectionHead"><span class="titlemark">1.5</span> <a id=
  "x1-90001.5" name="x1-90001.5"></a>Automated Management</h3>
  <!--l. 94-->

  <p class="noindent">The language agnostic philosophy even extends
  to the configuration system where you can use any language you
  need to configure it and manage it, as long as the results are a
  SQLite3 database Mongrel2 can read and work with to run. There
  are great tools for managing this database already written in
  Python, but if you hate Python then you can write anything you
  want. <!--l. 100-->

  <p class="indent">This pattern is established with servers like
  Postfix, Exim, Sendmail, qmail, and others that convert
  configuration files to half-assed SQL databases. Mongrel2
  effectively adopts a Model-View-Controller design for its
  configuration system, the same way every web application is
  designed today. The Model is a SQlite3 database file, which any
  programming language can access. The Controller is a Mongrel2
  process that reads this file and sets itself up accordingly. 
  <!--l. 108-->

  <p class="indent">The View is a Python script called m2sh that
  gives you a command line &rdquo;UI&rdquo; to configure and setup
  the Mongrel2 sqlite model. It gives you commands for managing it,
  crafting configurations, looking at them, the works. 
  <!--l. 112-->

  <p class="indent">But most importantly, <span class=
  "pplri7t-">you can write your own</span>. You don&rsquo;t have to
  wait for a Mongrel2 developer to craft a configuration file
  parser for your favorite language, or use some hack job Nagios
  Perl junk to automate or scan it. It&rsquo;s SQlite3 with a solid
  simple schema and well written Python code showing you how it
  works. <!--l. 118-->

  <p class="indent">Nothing stops you from automating the hell out
  of Mongrel2 with that. <!--l. 121-->

  <p class="noindent">

  <h3 class="sectionHead"><span class="titlemark">1.6</span> <a id=
  "x1-100001.6" name="x1-100001.6"></a>Using This Manual</h3>
  <!--l. 123-->

  <p class="noindent">This manual is intended to be fun to read, so
  probably the best way to use it is to actually <span class=
  "pplri7t-">read it</span>. <!--l. 126-->

  <p class="indent">I know, revolutionary right. I mean, who has
  time to read and learn about something these days. You just want
  to get in there and get whatever problem you have done. Now! No
  time for words. You just want a straight dump right into your
  brain so that you are able to solve all your problems instantly
  and screw all this talking. <!--l. 131-->

  <p class="indent">You ever ask yourself if this attitude about
  not wanting to read and learn is possibly the reason you always
  get stuck in emergencies with no time to read and learn? 
  <!--l. 135-->

  <p class="indent">Something to think about. <!--l. 137-->

  <p class="indent">My recommendation is that you go through every
  page of this manual and do the stuff in it. Even if you think you
  won&rsquo;t need something, because you&rsquo;re not a
  programmer, or you&rsquo;re not in operations, you should learn
  it. Doing so will make the parts you do need clearer and give you
  better ideas for later.

  <h2 class="chapterHead"><span class=
  "titlemark">Chapter&nbsp;2</span><br>
  <a id="x1-110002" name="x1-110002"></a>Installing</h2><!--l. 3-->

  <p class="noindent">Mongrel2 is designed to build on most modern
  Unix systems, specifically Linux and Mac OSX. It is written in C
  (<span class="pplri7t-">not Ruby</span>) and uses fairly vanilla
  C and standard libraries, except for one piece that implements
  the internal coroutines. Other than this you should be able to
  compile and install Mongrel2 with nothing more than <span class=
  "pplri7t-">make all install</span> after you&rsquo;ve installed
  all the dependencies. <!--l. 10-->

  <p class="indent">Now, if when I said dependencies you started to
  groan at having to install software to use my software, well my
  friend, welcome to the future. You said you don&rsquo;t want
  people reinventing the wheel right? Great, that means you need to
  install software for my software to work. It&rsquo;s either that
  or wait 10 years for me to build everything from scratch like
  some arrogant jackass. <!--l. 17-->

  <p class="indent">We good now? Great, let&rsquo;s get started.

  <h3 class="sectionHead"><span class="titlemark">2.1</span> <a id=
  "x1-120002.1" name="x1-120002.1"></a>Install Dependencies</h3>
  <!--l. 21-->

  <p class="noindent">To get everything working you will need the
  following dependencies:

  <ul class="itemize1">
    <li class="itemize">GNU make (gmake).

    <li class="itemize"><a href="http://zeromq.org">ZeroMQ</a> for
    the messaging.

    <li class="itemize"><a href="http://python.org">Python 2.6</a>
    for the m2sh management and examples.

    <li class="itemize"><a href=
    "http://www.sqlite.org/">SQLite3</a> and make sure <span class=
    "pplri7t-">Python</span> has the ability to access SQLite3.

    <li class="itemize"><a href=
    "http://pypi.python.org/pypi/distribute">distribute</a> and
    <a href="http://pypi.python.org/pypi/pip/0.7.2">pip</a>.

    <li class="itemize"><a href=
    "http://github.com/ellisonbg/pyzmq">PyZMQ</a> for the examples.
  </ul><!--l. 32-->

  <p class="indent">If you install these things in this order, then
  everything should be good. Typically people run into problems if
  they do this out of order, for example trying to install Mongrel2
  before they have distribute and pip installed. <!--l. 36-->

  <p class="indent">Since every system is different it is difficult
  to tell you exactly how to install required packages for your OS,
  but here&rsquo;s how I did it on my computer: <!--l. 40-->

  <p class="indent"><a id="x1-12001r1" name="x1-12001r1"></a>
  <hr class="float">

  <div class="float">
    <div class="caption">
      <span class="id">Source 1:</span> <span class=
      "content"><span class="pplri7t-">Installing Dependencies
      on</span> <span class="pplri7t-">ArchLinux</span></span>
    </div><!--tex4ht:label?: x1-12001r1 -->

    <div class="verbatim" id="verbatim-1">
      #&nbsp;install&nbsp;ZeroMQ &nbsp;<br>
      &gt;&nbsp;wget&nbsp;http://www.zeromq.org/local--files/area:download/zeromq-2.0.7.tar.gz
      &nbsp;<br>
      &gt;&nbsp;tar&nbsp;-xzvf&nbsp;zeromq-2.0.7.tar.gz &nbsp;<br>
      &gt;&nbsp;cd&nbsp;zeromq-2.0.7/ &nbsp;<br>
      &gt;&nbsp;./configure &nbsp;<br>
      &gt;&nbsp;make &nbsp;<br>
      &gt;&nbsp;sudo&nbsp;make&nbsp;install &nbsp;<br>
      &nbsp;<br>
      #&nbsp;install&nbsp;python &nbsp;<br>
      &gt;&nbsp;sudo&nbsp;pacman&nbsp;-S&nbsp;python &nbsp;<br>
      &nbsp;<br>
      #&nbsp;install&nbsp;sqlite3 &nbsp;<br>
      &gt;&nbsp;sudo&nbsp;pacman&nbsp;-S&nbsp;sqlite3 &nbsp;<br>
      &nbsp;<br>
      #&nbsp;install&nbsp;distribute&nbsp;and&nbsp;pip &nbsp;<br>
      &gt;&nbsp;sudo&nbsp;pacman&nbsp;-S&nbsp;python-pip &nbsp;<br>
      &gt;&nbsp;sudo&nbsp;pip&nbsp;install&nbsp;distribute
      &nbsp;<br>
      &nbsp;<br>
      #&nbsp;install&nbsp;PyZMQ&nbsp;from&nbsp;github &nbsp;<br>
      &gt;&nbsp;sudo&nbsp;pacman&nbsp;-S&nbsp;git &nbsp;<br>
      &gt;&nbsp;git&nbsp;clone&nbsp;http://github.com/ellisonbg/pyzmq.git
      &nbsp;<br>
      &gt;&nbsp;sudo&nbsp;python&nbsp;setup.py&nbsp;install
    </div><!--l. 64-->

    <p class="nopar">
  </div>
  <hr class="endfloat">
  <!--l. 67-->

  <p class="indent">If you run into parts that your OS is missing,
  which is likely on Debian and SuSE systems, then you&rsquo;ll
  have to go and figure out how to install it.

  <h3 class="sectionHead"><span class="titlemark">2.2</span> <a id=
  "x1-130002.2" name="x1-130002.2"></a>Building Mongrel2</h3>
  <!--l. 74-->

  <p class="noindent">If everything went well you should be able to
  grab the Mongrel2 source and try building it. There&rsquo;s two
  ways you can get the source code to Mongrel2: <!--l. 78-->

  <p class="indent">

  <ol class="enumerate1">
    <li class="enumerate" id="x1-13002x1">Install <a href=
    "http://fossil-scm.org">Fossil SCM</a> and check out the
    source.

    <li class="enumerate" id="x1-13004x2">Grab the source .zip
    release and install it from there.
  </ol><!--l. 83-->

  <p class="noindent">

  <h4 class="subsectionHead"><span class="titlemark">2.2.1</span>
  <a id="x1-140002.2.1" name="x1-140002.2.1"></a>Using Fossil</h4>
  <!--l. 85-->

  <p class="noindent">Since it&rsquo;s early in Mongrel2
  development we recommend you get fossil and install it so you can
  track the latest fixes and development. Here&rsquo;s the easiest
  way to do that: <!--l. 89-->

  <p class="indent">

  <ol class="enumerate1">
    <li class="enumerate" id="x1-14002x1">Go to <a href=
    "http://www.fossil-scm.org/download.html">the fossil download
    page</a> and grab the binary that fits your system, or the
    source tar.gz.

    <li class="enumerate" id="x1-14004x2">Follow their <a href=
    "http://fossil-scm.org/index.html/doc/tip/www/build.wiki">install
    instructions</a> to get it on your system.

    <li class="enumerate" id="x1-14006x3">If you find that your
    version of fossil ends up having problems with mongrel2.org let
    us know since we might need to upgrade.
  </ol><!--l. 98-->

  <p class="indent">Once you have fossil you can then get the
  Mongrel2 source and open it up: <!--l. 100-->

  <p class="indent"><a id="x1-14007r2" name="x1-14007r2"></a>
  <hr class="float">

  <div class="float">
    <div class="caption">
      <span class="id">Source 2:</span> <span class=
      "content"><span class="pplri7t-">Cloning The Mongrel2</span>
      <span class="pplri7t-">Source</span></span>
    </div><!--tex4ht:label?: x1-14007r2 -->

    <div class="verbatim" id="verbatim-2">
      &gt;&nbsp;mkdir&nbsp;~/fossils &nbsp;<br>
      &gt;&nbsp;fossil&nbsp;clone&nbsp;http://mongrel2.org&nbsp;~/fossils/mongrel2.fossil
      &nbsp;<br>
      &gt;&nbsp;mkdir&nbsp;mongrel2 &nbsp;<br>
      &gt;&nbsp;cd&nbsp;mongrel2 &nbsp;<br>
      &gt;&nbsp;fossil&nbsp;open&nbsp;~/fossils/mongrel2.fossil
    </div><!--l. 107-->

    <p class="nopar">
  </div>
  <hr class="endfloat">
  <!--l. 110-->

  <p class="indent">Make sure you do this in order (just like with
  every set of instructions you should follow) or else you&rsquo;ll
  get errors. For example, if you don&rsquo;t make the <span class=
  "pplb7t-">&nbsp;/fossils</span> directory then you&rsquo;ll get
  an error saying fossil can&rsquo;t open your file to clone. Well,
  that&rsquo;s because you <span class="pplri7t-">didn&rsquo;t make
  the</span> <span class="pplri7t-">&nbsp;/fossils
  directory</span>. Just pay attention and don&rsquo;t blame fossil
  if you can&rsquo;t.

  <h4 class="subsectionHead"><span class="titlemark">2.2.2</span>
  <a id="x1-150002.2.2" name="x1-150002.2.2"></a>Using The .zip
  File</h4><!--l. 119-->

  <p class="noindent">If you don&rsquo;t want to install fossil
  then you will need to get the .zip file from our site and install
  it that way. Since the code is new you have <span class=
  "pplri7t-">no guarantees</span> that this will work at all or
  that you will get a stable server. We have not made an official
  release, so using the .zip file is effectively a lame way of
  avoiding using fossil. <!--l. 125-->

  <p class="indent">

  <ol class="enumerate1">
    <li class="enumerate" id="x1-15002x1">Login as an anonymous
    user <a href="http://mongrel2.org/login">at mongrel2.org</a>.

    <li class="enumerate" id="x1-15004x2">Go to the <a href=
    "http://mongrel2.org/info/tip">latest source tip</a>.

    <li class="enumerate" id="x1-15006x3">Click on the &rdquo;ZIP
    archive&rdquo; link to download the latest zip file of the
    source.

    <li class="enumerate" id="x1-15008x4">Unzip this file and cd
    into the resulting directory.
  </ol><!--l. 133-->

  <p class="noindent">

  <h3 class="sectionHead"><span class="titlemark">2.3</span> <a id=
  "x1-160002.3" name="x1-160002.3"></a>Building And Installing</h3>
  <!--l. 135-->

  <p class="noindent">Once you have the source ready to go you can
  build it and then install it with one command: <span class=
  "pplri7t-">make all install</span> <!--l. 138-->

  <p class="indent">There is no <span class=
  "pplri7t-">./configure</span> for Mongrel2 since we avoid too
  many OS specific differences or shield those away with good
  feature checks in the code. <!--l. 141-->

  <p class="indent">The end result of this should be: <!--l. 143-->

  <p class="indent">

  <ol class="enumerate1">
    <li class="enumerate" id="x1-16002x1">Mongrel2 builds and
    compiles without errors.

    <li class="enumerate" id="x1-16004x2">All the unit tests run,
    please tell us about failures.

    <li class="enumerate" id="x1-16006x3">The Python libraries that
    m2sh needs get installed.

    <li class="enumerate" id="x1-16008x4">The m2sh itself gets
    installed.

    <li class="enumerate" id="x1-16010x5">Finally the mongrel2
    binary gets installed.
  </ol><!--l. 151-->

  <p class="indent">If any of these stages fail, then you can
  simply try to fix them and then run: <span class=
  "pplri7t-">make</span> <span class="pplri7t-">clean all
  install</span> which will do everything all over again. 
  <!--l. 154-->

  <p class="indent">The most common error is if you didn&rsquo;t
  install pip or distribute and insist on using your own
  system&rsquo;s package management. Do <span class=
  "pplri7t-">not</span> report bugs about your own flavor of
  Linux&rsquo;s stupidity about versions and how it installs
  Python. If you don&rsquo;t want to use the package system every
  other Python programmer uses then you&rsquo;re on your own. 
  <!--l. 160-->

  <p class="indent"><a id="x1-16011r1" name="x1-16011r1"></a>
  <hr class="float">

  <div class="float">
    <div class="caption">
      <span class="id">Note 1:</span> <span class=
      "content"><span class="pplri7t-">Use Virtualenv If You
      Fear</span> <span class="pplri7t-">Pip</span></span>
    </div><!--tex4ht:label?: x1-16011r1 -->

    <div class="quote">
      <!--l. 161-->

      <p class="noindent">For those who still want to use the
      package management but want to use pip and distribute I
      suggest you check out <a href=
      "http://pypi.python.org/pypi/virtualenv">virtualenv</a>. What
      virtualenv does is create a little &rdquo;chroot
      install&rdquo; of just the packages you need using pip or
      distribute. When you don&rsquo;t want them anymore you can
      just delete one directory and you&rsquo;re fine.
    </div>
  </div>
  <hr class="endfloat">

  <h3 class="sectionHead"><span class="titlemark">2.4</span> <a id=
  "x1-170002.4" name="x1-170002.4"></a>Testing The
  Installation</h3><!--l. 171-->

  <p class="noindent">When you are done you probably want to make
  sure that it installed correctly. There&rsquo;s a test
  configuration file in <span class=
  "pplb7t-">tests/config.sqlite</span> that you can use to try it
  out: <!--l. 175-->

  <p class="indent"><a id="x1-17001r3" name="x1-17001r3"></a>
  <hr class="float">

  <div class="float">
    <div class="caption">
      <span class="id">Source 3:</span> <span class=
      "content"><span class="pplri7t-">First Test</span>
      <span class="pplri7t-">Run</span></span>
    </div><!--tex4ht:label?: x1-17001r3 -->

    <div class="verbatim" id="verbatim-3">
      &gt;&nbsp;mkdir&nbsp;run &nbsp;<br>
      &gt;&nbsp;mkdir&nbsp;logs &nbsp;<br>
      &gt;&nbsp;mkdir&nbsp;tmp &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;dump&nbsp;-db&nbsp;tests/config.sqlite
      &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;start&nbsp;-db&nbsp;tests/config.sqlite&nbsp;-host&nbsp;localhost
    </div><!--l. 182-->

    <p class="nopar">
  </div>
  <hr class="endfloat">
  <!--l. 185-->

  <p class="indent">That&rsquo;s it. Just hit CTRL-c for now and
  we&rsquo;ll get into playing with this setup later.

  <h3 class="sectionHead"><span class="titlemark">2.5</span> <a id=
  "x1-180002.5" name="x1-180002.5"></a>Up Next</h3><!--l. 190-->

  <p class="noindent">You now should have a working Mongrel2 system
  installed and the m2sh configuration interface ready to go. In
  the rest of this manual we&rsquo;ll be simply learning how to do
  more with Mongrel2 like making our own configs, writing handlers,
  and other fun stuff. <!--l. 1-->

  <p class="indent">

  <h2 class="chapterHead"><span class=
  "titlemark">Chapter&nbsp;3</span><br>
  <a id="x1-190003" name="x1-190003"></a>Deploying</h2><!--l. 3-->

  <p class="noindent">Mongrel2 is designed to be easy to deploy and
  <span class="pplri7t-">automate</span> the deployment. This is
  why it uses <a href="http://www.sqlite.org/">SQLite</a> to store
  the configuration, but <span class="pplri7t-">m2sh</span> as an
  interface to creating the configuration. Doing this lets you
  access the configuration using any language that works for you,
  augment it, alter it, migrate it, and automate it. <!--l. 9-->

  <p class="indent">In this chapter I&rsquo;m going to show you how
  to make a basic configuration using m2sh and all the commands
  that are available. You&rsquo;ll learn how the configuration
  system is structured so that you know what goes where, but in the
  end it&rsquo;s just a simple storage mechanism. <!--l. 14-->

  <p class="indent"><a id="x1-19001r2" name="x1-19001r2"></a>
  <hr class="float">

  <div class="float">
    <div class="caption">
      <span class="id">Note 2:</span> <span class=
      "content"><span class="pplri7t-">Apparently SQL
      Inspires</span> <span class="pplri7t-">FUD</span></span>
    </div><!--tex4ht:label?: x1-19001r2 -->

    <div class="quote">
      <!--l. 15-->

      <p class="noindent">When I first started talking about
      Mongrel2 I said I&rsquo;d store the configuration in SQLite
      and do a Model-View-Controller kind of design. Immediately
      people who can&rsquo;t read flipped out and though this meant
      they&rsquo;d be back in &rdquo;windows registry hell&rdquo;
      but with SQL as their only way to access it. They thought
      that they&rsquo;d be stuck writing configurations with SQL.
      That SQL couldn&rsquo;t possibly configure a web server. 
      <!--l. 21-->

      <p class="noindent">They were wrong on many levels. Nobody
      was <span class="pplri7t-">ever</span> going to make
      <span class="pplri7t-">anyone</span> use SQL. That was
      repeated over and over, but again, people don&rsquo;t read
      and love spreading FUD. The SQLite config database is nothing
      like the Windows Registry. No other web server really uses a
      true hierarchy, they just cram a relational model into a
      weirdo configuration format. The real goal was to make a web
      server that was easy to manage from <span class=
      "pplri7t-">any</span> language, and then give people a nice
      tool to get their job done without having to ever touch SQL.
      <span class="pplri7t-">EVER!</span> <!--l. 29-->

      <p class="noindent">In the end, what we got despite all this
      fear mongering is a bad ass configuration tool and a design
      that is simple, elegant, and works fantastic. If you read
      that Mongrel2 uses SQLite and though this was weird, well
      welcome to the future. Sometimes it&rsquo;s weird out here
      (even though, Postfix has been doing this for a decade or
      more).
    </div>
  </div>
  <hr class="endfloat">

  <h3 class="sectionHead"><span class="titlemark">3.1</span> <a id=
  "x1-200003.1" name="x1-200003.1"></a>Model-View-Controller</h3>
  <!--l. 38-->

  <p class="noindent">When you hear Model-View-Controller you think
  about web applications. This is a design pattern where you place
  different concerns into different parts of your system and try
  not to mix them too much. For an interactive application, if you
  keep the part that stores data (Model) separated from the logic
  (Controller) and use another piece to display and interact with
  the user (View) then it&rsquo;s easier to change the system and
  adapt it over time to new features. <!--l. 44-->

  <p class="indent">The power of MVC is simply that these things
  really are separate orthogonal pieces that get ugly if
  they&rsquo;re mixed together. There&rsquo;s not math or theory
  that says why, just lots of experience has told us it&rsquo;s
  usually a bad idea. When you start mixing them you find out that
  it&rsquo;s hard to change for new requirements later because
  you&rsquo;ve sprinkled logic all over your web pages. Or you
  can&rsquo;t update your database because there&rsquo;s all these
  stored procedures that assume the tables are a certain way. 
  <!--l. 51-->

  <p class="indent">Mongrel2 needed a way to allow you to use
  various languages and tools to automate its configuration.
  Letting you automate your deployments is the entire point of the
  server. The idea was that if we gave you the Controller and the
  Model, then you can craft any <span class="pplri7t-">View</span>
  you wanted, and there&rsquo;s no better Model than a SQL database
  like SQLite. It&rsquo;s embeddable, easily accessed from C or any
  language, portable, small, fast enough, and full of all the
  features you need and then some. <!--l. 57-->

  <p class="indent">What you are doing when you use m2sh to
  configure a configuration for Mongrel2 is working with a View
  we&rsquo;ve given you to create a Model for the Mongrel2 server
  to work with. That&rsquo;s it, and you can create your own View
  if you want. It could be automated deployment scripts, a web
  interface, monitoring scripts, anything you need. <!--l. 62-->

  <p class="indent">The point is, if you just want to get Mongrel2
  up and running, then use m2sh. If you want to do more advanced
  stuff, then get into the configuration database schema and see
  what you can do. The structure of the database very closely
  matches Mongrel2&rsquo;s internal structure, so understanding
  that means you understand how Mongrel2 works. This is a vast
  improvement over other web servers like Apache where you&rsquo;ve
  got no idea why one stanza has to go in a particular place, or
  why information has to be duplicated. <!--l. 69-->

  <p class="indent">With Mongrel2 it&rsquo;s all right there. 
  <!--l. 72-->

  <p class="noindent">

  <h3 class="sectionHead"><span class="titlemark">3.2</span> <a id=
  "x1-210003.2" name="x1-210003.2"></a>Trying m2sh</h3><!--l. 74-->

  <p class="noindent">To give this configuration system a try you
  just need to run the test configuration used in the unit tests.
  Let&rsquo;s try doing a few of the most basic commands with this
  configuration: <!--l. 77-->

  <p class="indent"><a id="x1-21001r4" name="x1-21001r4"></a>
  <hr class="float">

  <div class="float">
    <div class="caption">
      <span class="id">Source 4:</span> <span class=
      "content"><span class="pplri7t-">Sample m2sh</span>
      <span class="pplri7t-">Commands</span></span>
    </div><!--tex4ht:label?: x1-21001r4 -->

    <div class="verbatim" id="verbatim-4">
      &gt;&nbsp;m2sh&nbsp;dump&nbsp;-db&nbsp;tests/config.sqlite
      &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;servers&nbsp;-db&nbsp;tests/config.sqlite
      &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;hosts&nbsp;-db&nbsp;tests/config.sqlite&nbsp;-host&nbsp;localhost
      &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;running&nbsp;-db&nbsp;tests/config.sqlite&nbsp;-host&nbsp;localhost
      &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;start&nbsp;-db&nbsp;tests/config.sqlite&nbsp;-host&nbsp;localhost
    </div><!--l. 84-->

    <p class="nopar">
  </div>
  <hr class="endfloat">
  <!--l. 87-->

  <p class="indent">At this point you should have seen some raw
  dumps of the database, lists of servers and hosts, seen that
  mongrel2 is not running, and then started it. You can find out
  about all the commands and get help for them with <span class=
  "pplri7t-">m2sh help</span> or <span class="pplri7t-">ms2h
  help</span> <span class="pplri7t-">-for command</span>. 
  <!--l. 91-->

  <p class="indent">You can now try doing some simple starting,
  stopping and reloading using sudo (make sure you CTRL-c to exit
  from the previous start command): <!--l. 94-->

  <p class="indent"><a id="x1-21002r5" name="x1-21002r5"></a>
  <hr class="float">

  <div class="float">
    <div class="caption">
      <span class="id">Source 5:</span> <span class=
      "content"><span class="pplri7t-">Starting, Stopping,</span>
      <span class="pplri7t-">Reloading</span></span>
    </div><!--tex4ht:label?: x1-21002r5 -->

    <div class="verbatim" id="verbatim-5">
      &gt;&nbsp;m2sh&nbsp;start&nbsp;-db&nbsp;tests/config.sqlite&nbsp;-host&nbsp;localhost&nbsp;-sudo
      &nbsp;<br>
      &gt;&nbsp;tail&nbsp;logs/error.log &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;reload&nbsp;-db&nbsp;tests/config.sqlite&nbsp;-host&nbsp;localhost
      &nbsp;<br>
      &gt;&nbsp;tail&nbsp;logs/error.log &nbsp;<br>
      &gt;&nbsp;curl&nbsp;http://localhost:8080/ &nbsp;<br>
      &gt;&nbsp;tail&nbsp;logs/error.log &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;running&nbsp;-db&nbsp;tests/config.sqlite&nbsp;-host&nbsp;localhost
      &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;stop&nbsp;-db&nbsp;tests/config.sqlite&nbsp;-host&nbsp;localhost
    </div><!--l. 104-->

    <p class="nopar">
  </div>
  <hr class="endfloat">
  <!--l. 107-->

  <p class="indent">Awesome right? Using just this one little
  Python management script you are able to completely manage a
  mongrel2 instance without having to hack on a config file at all.
  But you probably need to know how this is all working anyway.

  <h4 class="subsectionHead"><span class="titlemark">3.2.1</span>
  <a id="x1-220003.2.1" name="x1-220003.2.1"></a>What The Hell Just
  Happened?</h4><!--l. 115-->

  <p class="noindent">You now have done nearly everything you can
  to a configuration, but you might not know exactly what&rsquo;s
  going on. Here&rsquo;s an explanation of what&rsquo;s going on
  behind the scenes: <!--l. 118-->

  <p class="indent">

  <ol class="enumerate1">
    <li class="enumerate" id="x1-22002x1">When you did <span class=
    "pplri7t-">m2sh start</span> with the <span class=
    "pplri7t-">-sudo</span> option it actually runs <span class=
    "pplri7t-">sudo</span> <span class="pplri7t-">mongrel2
    tests/config.sqlite localhost</span> to start the server.

    <li class="enumerate" id="x1-22004x2">Mongrel2 is now running
    in the background as a daemon process, just like a regular
    server however what it did was chroot to the current directory
    and then drop privileges so that they match the owner of that
    directory (you). Use <span class="pplri7t-">ps aux</span> to
    take a look.

    <li class="enumerate" id="x1-22006x3">With Mongrel2 running you
    can look in the logs/error.log file to see what it said. It
    should be a bunch of debug logging but check out the messages,
    nice and detailed.

    <li class="enumerate" id="x1-22008x4">Next you did a soft
    reload with <span class="pplri7t-">m2sh reload</span> and you
    should notice that your mongrel2 process was able to load the
    new config <span class="pplri7t-">without restarting</span>.

    <li class="enumerate" id="x1-22010x5">However, there&rsquo;s a
    slight bug that doesn&rsquo;t do the reload until the next
    request is served, that&rsquo;s what the <span class=
    "pplri7t-">curl http://localhost:8080/</span> was for.

    <li class="enumerate" id="x1-22012x6">Now that you can see this
    reload work in the <span class="pplb7t-">logs/error.log</span>
    you used <span class="pplri7t-">m2sh running</span> to see if
    it&rsquo;s running. This command is just reading the config
    database to find out where the PID file is (<span class=
    "pplb7t-">run/mongrel2.pid</span>) and then checking if that
    process is running.

    <li class="enumerate" id="x1-22014x7">Finally, you tell
    mongrel2 to stop, and since it dropped privileges to be owned
    by you, you can do that without having to use sudo.
  </ol><!--l. 137-->

  <p class="indent">All of this is happening by reading the
  <span class="pplb7t-">tests/config.sqlite</span> file and not
  reading any configuration files. You can now try building your
  own configuration that matches this one or some others. 
  <!--l. 141-->

  <p class="noindent">

  <h3 class="sectionHead"><span class="titlemark">3.3</span> <a id=
  "x1-230003.3" name="x1-230003.3"></a>A Simple Configuration
  File</h3><!--l. 143-->

  <p class="noindent">To configure a new config database
  you&rsquo;ll write a Python file that looks a lot like a
  configuration file. The advantage of using Python is that you can
  put actual real logic in your configuration file in order to make
  your configuration smarter. A great application of this is when
  your configuration has to change depending on the server it is
  deployed on, but you want to check the configuration file into a
  revision control system. With Python you just write your
  configuration like it&rsquo;s code and you&rsquo;re set. 
  <!--l. 151-->

  <p class="indent">The first thing you need to do is initialize a
  fresh configuration database to get started by using <span class=
  "pplri7t-">m2sh init</span> and then you load your configuration
  using <span class="pplri7t-">m2sh load</span>. As an example,
  we&rsquo;ll use the example configuration from <span class=
  "pplb7t-">examples/python/tests/sample&#729;conf.py</span> to
  make a simple one: <!--l. 156-->

  <p class="indent"><a id="x1-23001r6" name="x1-23001r6"></a>
  <hr class="float">

  <div class="float">
    <div class="caption">
      <span class="id">Source 6:</span> <span class=
      "content"><span class="pplri7t-">Simple Little Config</span>
      <span class="pplri7t-">Example</span></span>
    </div><!--tex4ht:label?: x1-23001r6 -->

    <div class="verbatim" id="verbatim-6">
      from&nbsp;mongrel2.config&nbsp;import&nbsp;&#8902; &nbsp;<br>
      &nbsp;<br>
      main&nbsp;=&nbsp;Server( &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;uuid="f400bf85-4538-4f7a-8908-67e313d515c2",
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;access_log="/logs/access.log",
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;error_log="/logs/error.log",
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;chroot="./", &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;default_host="localhost", &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;pid_file="/run/mongrel2.pid",
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;port=6767, &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;hosts&nbsp;=&nbsp;&#91; &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Host(name="localhost",&nbsp;routes={
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'/tests/':&nbsp;Dir(base='tests/',&nbsp;index_file='index.html',
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default_ctype='text/plain')
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}) &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#93; &nbsp;<br>
      ) &nbsp;<br>
      &nbsp;<br>
      commit(&#91;main&#93;)
    </div><!--l. 177-->

    <p class="nopar">
  </div>
  <hr class="endfloat">
  <!--l. 180-->

  <p class="indent">If you aren&rsquo;t familiar with Python then
  this code might look freaky, but it&rsquo;s really simple. Well
  get into how its structured in a second, but to load this file we
  would just do this: <!--l. 184-->

  <p class="indent"><a id="x1-23002r7" name="x1-23002r7"></a>
  <hr class="float">

  <div class="float">
    <div class="caption">
      <span class="id">Source 7:</span> <span class=
      "content"><span class="pplri7t-">Loading The Simple</span>
      <span class="pplri7t-">Config</span></span>
    </div><!--tex4ht:label?: x1-23002r7 -->

    <div class="verbatim" id="verbatim-7">
      &gt;&nbsp;m2sh&nbsp;init&nbsp;-db&nbsp;simple.sqlite
      &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;load&nbsp;-db&nbsp;simple.sqlite&nbsp;-config&nbsp;examples/python/tests/sample_conf.py
      &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;servers&nbsp;-db&nbsp;simple.sqlite
      &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;hosts&nbsp;-db&nbsp;simple.sqlite&nbsp;-host&nbsp;localhost
      &nbsp;<br>
      &gt;&nbsp;m2sh&nbsp;start&nbsp;-db&nbsp;simple.sqlite&nbsp;-host&nbsp;localhost
    </div><!--l. 191-->

    <p class="nopar">
  </div>
  <hr class="endfloat">
  <!--l. 194-->

  <p class="indent">With this sequence of commands you:

  <ol class="enumerate1">
    <li class="enumerate" id="x1-23004x1">Create a raw fresh config
    database name <span class="pplb7t-">simple.sqlite</span>

    <li class="enumerate" id="x1-23006x2">Load the <span class=
    "pplb7t-">sample&#729;conf.py</span> into it.

    <li class="enumerate" id="x1-23008x3">List the servers it has
    configured.

    <li class="enumerate" id="x1-23010x4">List the hosts that
    server has, with what routes it has.

    <li class="enumerate" id="x1-23012x5">Start this server to try
    it out.
  </ol><!--l. 204-->

  <p class="indent">By now you should be getting the hang of the
  pattern here, which is to use m2sh and little Python
  configuration &rdquo;script&rdquo; to generate .sqlite files that
  Mongrel2 understands.

  <h3 class="sectionHead"><span class="titlemark">3.4</span> <a id=
  "x1-240003.4" name="x1-240003.4"></a>How A Config Is
  Structured</h3><!--l. 210-->

  <p class="noindent">The base structure of a Mongrel2
  configuration is:

  <dl class="description">
    <dt class="description"><span class="pplb7t-">Server</span>

    <dd class="description">This is the root of a config, and you
    can have multiples of these in one database, even though each
    start command only runs one at a time.

    <dt class="description"><span class="pplb7t-">Host</span>

    <dd class="description">Servers then have Hosts inside them
    which say what DNS hostname Mongrel2 should answer for, and you
    can have multiples of these in each Server.

    <dt class="description"><span class="pplb7t-">Route</span>

    <dd class="description">Hosts have Routes in them which tells
    Mongrel2 what to do with URL paths and patterns that match
    them. Routes then have <span class="pplri7t-">Dir</span>,
    <span class="pplri7t-">Handler</span>, and <span class=
    "pplri7t-">Proxy</span> items in them.

    <dt class="description"><span class="pplb7t-">Dir</span>

    <dd class="description">A Dir serves files out of a directory,
    full with 304 and ETag support, default content types, and most
    of the things you need to serve them.

    <dt class="description"><span class="pplb7t-">Proxy</span>

    <dd class="description">A Proxy takes requests matching the
    Route they&rsquo;re attached to and sends them to another HTTP
    server somewhere else. Mongrel2 will then act as a full proxy
    and also try to keep connections open in keep-alive mode if the
    browser supports it.

    <dt class="description"><span class="pplb7t-">Handler</span>

    <dd class="description">A Handler is the best part of Mongrel2.
    It takes HTTP requests, and turns them into nicely packed and
    processed ZeroMQ messages for your asynchronous handlers.
  </dl><!--l. 228-->

  <p class="indent">Each of these nested &rdquo;objects&rdquo; then
  has a set of attributes you can use to configure them, and most
  of them have reasonable defaults. <!--l. 232-->

  <p class="noindent">

  <h4 class="subsectionHead"><span class="titlemark">3.4.1</span>
  <a id="x1-250003.4.1" name="x1-250003.4.1"></a>Server</h4>
  <!--l. 234-->

  <p class="noindent">The server is all about telling Mongrel2
  where to listen on its port, where to chroot, and general server
  specific deployment gear.

  <dl class="description">
    <dt class="description"><span class="pplb7t-">uuid</span>

    <dd class="description">A UUID is used to make sure that each
    deployed server is unique in your infrastructure. You could
    easily use any string that&rsquo;s letters, numbers, or -
    characters.

    <dt class="description"><span class="pplb7t-">chroot</span>

    <dd class="description">This is the directory that Mongrel2
    should chroot to and drop privileges.

    <dt class="description"><span class=
    "pplb7t-">access</span><span class="pplb7t-">_log</span>

    <dd class="description">The access log file <span class=
    "pplri7t-">relative to the chroot</span>. Usually starts with a
    &rsquo;/&rsquo;. Make sure you don&rsquo;t configure your
    server so that this and other files are accessible, or make
    this owned by root.

    <dt class="description"><span class=
    "pplb7t-">error</span><span class="pplb7t-">_log</span>

    <dd class="description">The error log file just like
    access&#729;log.

    <dt class="description"><span class=
    "pplb7t-">pid</span><span class="pplb7t-">_file</span>

    <dd class="description">Like the access log, where within the
    chroot directory is the pid file stored.

    <dt class="description"><span class=
    "pplb7t-">default</span><span class="pplb7t-">_host</span>

    <dd class="description">The server has a bunch of hosts listed,
    but it needs to know what the default host is. This is also
    used as a convenient way to refer to this Server.

    <dt class="description"><span class="pplb7t-">port</span>

    <dd class="description">The port the server should listen on
    for new connections.
  </dl><!--l. 251-->

  <p class="noindent">

  <h4 class="subsectionHead"><span class="titlemark">3.4.2</span>
  <a id="x1-260003.4.2" name="x1-260003.4.2"></a>Host</h4>
  <!--l. 253-->

  <p class="noindent">A host is matched using a kind of
  <span class="pplri7t-">inverse route</span> that matches the
  ending of <span class="pplri7t-">Host:</span> headers against a
  pattern. You&rsquo;ll see how this works when we talk about
  routes, but for now you just need to know that request to the
  <span class="pplri7t-">Server.port</span> are routed based on
  these <span class="pplri7t-">Host</span> configurations the
  <span class="pplri7t-">Server</span> contains.

  <dl class="description">
    <dt class="description"><span class="pplb7t-">name</span>

    <dd class="description">The name that you use to talk about
    this Host in the server configuration.

    <dt class="description"><span class="pplb7t-">matching</span>

    <dd class="description">This is a pattern that&rsquo;s used to
    match incoming Host headers for routing purposes.

    <dt class="description"><span class="pplb7t-">server</span>

    <dd class="description">If you want to set the server
    separately you can use this attribute.

    <dt class="description"><span class=
    "pplb7t-">maintenance</span>

    <dd class="description">This will a setting for the future that
    will let you have Mongrel2 throw up a maintenance page for this
    host.

    <dt class="description"><span class="pplb7t-">routes</span>

    <dd class="description">This is a dict (hashmap) of the URL
    patterns mapped to the targets that should be run.
  </dl><!--l. 268-->

  <p class="noindent">

  <h4 class="subsectionHead"><span class="titlemark">3.4.3</span>
  <a id="x1-270003.4.3" name="x1-270003.4.3"></a>Route</h4>
  <!--l. 270-->

  <p class="noindent">The <span class="pplri7t-">Route</span> is
  the workhorse of the whole system. It uses some very fancy but
  still simple code in Mongrel2 to translate <span class=
  "pplri7t-">Host:</span> headers to <span class=
  "pplri7t-">Hosts</span> and URL paths to <span class=
  "pplri7t-">Handlers</span>, <span class="pplri7t-">Dirs</span>,
  and <span class="pplri7t-">Proxies</span>.

  <dl class="description">
    <dt class="description"><span class="pplb7t-">path</span>

    <dd class="description">This is path <span class=
    "pplri7t-">pattern</span> that matches a route. The pattern
    uses the Mongrel2 pattern langauge which is a reduced version
    of the Lua pattern matching system.

    <dt class="description"><span class="pplb7t-">reversed</span>

    <dd class="description">Determines if this pattern is reversed,
    which is useful for matching file extensions, hostnames, and
    other naming systems where the ending is really the prefix.
    Usually you don&rsquo;t set this.

    <dt class="description"><span class="pplb7t-">host</span>

    <dd class="description">If you want to set the host manually
    then you can use this attribute.

    <dt class="description"><span class="pplb7t-">target</span>

    <dd class="description">This is the target that should handle
    the request, either a <span class="pplri7t-">Dir</span>,
    <span class="pplri7t-">Handler</span>, <span class=
    "pplri7t-">Proxy</span>.
  </dl><!--l. 283-->

  <p class="indent">Later on you&rsquo;ll learn about the pattern
  matching that&rsquo;s used, but it&rsquo;s basically a stripped
  down version of your normal regular expressions, but with a few
  convenient syntaxes for doing simple string matching. When you
  configure a route you write something like <span class=
  "pplb7t-">/images/(.*.jpg)</span> and the part before the
  &rsquo;(&rsquo; is used as a fast matched prefix while the part
  after is considered a pattern to match. When a request comes in,
  Mongrel2 quickly finds the longest prefix that matches the URL,
  and then tests its pattern if there is one. If the pattern is
  valid then the request goes through. If not then 404. 
  <!--l. 291-->

  <p class="noindent">

  <h4 class="subsectionHead"><span class="titlemark">3.4.4</span>
  <a id="x1-280003.4.4" name="x1-280003.4.4"></a>Dir</h4>
  <!--l. 293-->

  <p class="noindent">A <span class="pplri7t-">Dir</span> is a
  simple directory serving route target that serves files out of a
  directory. It has caching built-in, handles if-modified-since,
  etags, and all the various bizarre HTTP caching mechanisms as RFC
  accurate as possible. It also has default content types and index
  files.

  <dl class="description">
    <dt class="description"><span class="pplb7t-">base</span>

    <dd class="description">This is the base directory <span class=
    "pplri7t-">from the chroot</span> that is served. Files should
    not be served outside of this base directory even in the
    chroot.

    <dt class="description"><span class=
    "pplb7t-">index&#729;file</span>

    <dd class="description">This is the default index file to use
    if a request doesn&rsquo;t give one. The <span class=
    "pplri7t-">Dir</span> also will do redirects if a request for a
    directory doesn&rsquo;t end in a / slash.

    <dt class="description"><span class=
    "pplb7t-">default&#729;ctype</span>

    <dd class="description">The default Content-Type to use if none
    matches the MIMEType table.
  </dl><!--l. 305-->

  <p class="indent">Currently we don&rsquo;t offer more parameters
  for configuration, but eventually you&rsquo;ll be able to tweak
  more and more of the settings to control out Dirs work. 
  <!--l. 308-->

  <p class="noindent">

  <h4 class="subsectionHead"><span class="titlemark">3.4.5</span>
  <a id="x1-290003.4.5" name="x1-290003.4.5"></a>Proxy</h4>
  <!--l. 310-->

  <p class="noindent">A Proxy is a Ghetto. It is used so that you
  can use Mongrel2 but not have to throw out your existing
  infrastructure. Mongrel2 goes to great pains to make sure that it
  implements a fast and dead accurate proxy system internally, but
  no matter how good it is it can&rsquo;t compete with ZeroMQ
  handlers. The idea with giving Proxy functionality is you can
  point Mongrel2 at existing servers, and then slowly carve out
  pieces that will work as handlers.

  <dl class="description">
    <dt class="description"><span class="pplb7t-">addr</span>

    <dd class="description">The DNS address of the server.

    <dt class="description"><span class="pplb7t-">port</span>

    <dd class="description">The port to connect to.
  </dl><!--l. 323-->

  <p class="indent">Requests that match a Proxy route are still
  parsed by Mongrel2&rsquo;s incredibly accurate HTTP parser so
  that your backend servers should not be receiving badly formatted
  HTTP requests. Responses from a Proxy server however are sent
  unaltered to the browser directly. <!--l. 329-->

  <p class="noindent">

  <h4 class="subsectionHead"><span class="titlemark">3.4.6</span>
  <a id="x1-300003.4.6" name="x1-300003.4.6"></a>Handler</h4>
  <!--l. 331-->

  <p class="noindent">Now we get to the best part, the ZeroMQ
  <span class="pplri7t-">Handlers</span> that will receive
  asynchronous requests from Mongrel2. You need to use the ZeroMQ
  syntax for configuring them, but this means with one
  configuration format you can use handlers that are using udp,
  tcp, unix, or pgm transports. Most testing has been done with tcp
  transports the most.

  <dl class="description">
    <dt class="description"><span class=
    "pplb7t-">send&#729;spec</span>

    <dd class="description">This is the 0MQ sender specification,
    something like &rdquo;tcp://127.0.0.1:9999&rdquo; will use tcp
    to connect to a server on 127.0.0.1 at port 9999. The type of
    socket used is a DOWNSTREAM socket so that handlers receive
    messages in round-robin style.

    <dt class="description"><span class=
    "pplb7t-">send&#729;ident</span>

    <dd class="description">This is an identifier (usually a UUID)
    that will be used to register the send socket. Doing this makes
    it so that messages are persisted between crashes.

    <dt class="description"><span class=
    "pplb7t-">recv&#729;spec</span>

    <dd class="description">Same as the send spec, but it&rsquo;s
    for receiving responses from Handlers. The type of socket used
    is a SUB socket so that a cluster of Mongrel2 servers will
    receive handler responses but only the one with the right
    recv&#729;ident will process it.

    <dt class="description"><span class=
    "pplb7t-">recv&#729;ident</span>

    <dd class="description">This is another UUID if you want the
    receive socket to subscribe to its messages. Handlers properly
    mention the send&#729;ident on all returned messages, so you
    should either set this to nothing and don&rsquo;t subscribe, or
    set it to the same as send&#729;ident.
  </dl><!--l. 350-->

  <p class="indent">The interesting thing about the <span class=
  "pplri7t-">Handler</span> configuration is you don&rsquo;t have
  to say where the actual backend handlers live. Notice you
  aren&rsquo;t declaring large clusters of proxies, proxy selection
  methods, or anything else other than two 0MQ endpoints and some
  identifiers? This is because Mongrel2 is <span class=
  "pplri7t-">binding</span> these sockets and listening. Mongrel2
  doesn&rsquo;t actively connect to backends, they connect to
  Mongrel2. This means if you want to fire up 10 more handlers, you
  just start them. No need to restart or reconfigure Mongrel2 to
  make them active. <!--l. 358-->

  <p class="noindent">

  <h4 class="subsectionHead"><span class="titlemark">3.4.7</span>
  <a id="x1-310003.4.7" name="x1-310003.4.7"></a>Others</h4>
  <!--l. 360-->

  <p class="noindent">There&rsquo;s also <span class=
  "pplri7t-">Log</span>, <span class="pplri7t-">MIMEType</span>,
  and <span class="pplri7t-">Setting</span> objects/tables you can
  work with, but we&rsquo;ll get into those later since you
  don&rsquo;t need to know about them to understand the Mongrel2
  structure. <!--l. 366-->

  <p class="noindent">

  <h3 class="sectionHead"><span class="titlemark">3.5</span> <a id=
  "x1-320003.5" name="x1-320003.5"></a>A More Complex Example</h3>
  <!--l. 368-->

  <p class="noindent">All of this knowledge about the Mongrel2
  configuration structure can now be used to take a look at a more
  complex example. What we&rsquo;ll do is take a look at this
  example and I&rsquo;ll just say what&rsquo;s going on, and you
  try to match what I&rsquo;m saying to the code. Here&rsquo;s the
  file <span class=
  "pplb7t-">examples/python/tests/mongrel2&#729;org.py</span>: 
  <!--l. 372-->

  <p class="indent"><a id="x1-32001r8" name="x1-32001r8"></a>
  <hr class="float">

  <div class="float">
    <div class="caption">
      <span class="id">Source 8:</span> <span class=
      "content"><span class="pplri7t-">Mongrel2.org Config</span>
      <span class="pplri7t-">Script</span></span>
    </div><!--tex4ht:label?: x1-32001r8 -->

    <div class="verbatim" id="verbatim-8">
      from&nbsp;mongrel2.config&nbsp;import&nbsp;&#8902; &nbsp;<br>
      &nbsp;<br>
      main&nbsp;=&nbsp;Server( &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;uuid="2f62bd5-9e59-49cd-993c-3b6013c28f05",
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;access_log="/logs/access.log",
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;error_log="/logs/error.log",
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;chroot="./", &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;pid_file="/run/mongrel2.pid",
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;default_host="mongrel2.org",
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;port=6767 &nbsp;<br>
      ) &nbsp;<br>
      &nbsp;<br>
      &nbsp;<br>
      test_directory&nbsp;=&nbsp;Dir(base='tests/', &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index_file='index.html',
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default_ctype='text/plain')
      &nbsp;<br>
      &nbsp;<br>
      web_app_proxy&nbsp;=&nbsp;Proxy(addr='127.0.0.1',&nbsp;port=80)
      &nbsp;<br>
      &nbsp;<br>
      chat_demo_dir&nbsp;=&nbsp;Dir(base='examples/chat/static/',
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index_file='index.html',
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default_ctype='text/plain')
      &nbsp;<br>
      &nbsp;<br>
      chat_demo&nbsp;=&nbsp;Handler(send_spec='tcp://127.0.0.1:9999',
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send_ident='54c6755b-9628-40a4-9a2d-cc82a816345e',
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recv_spec='tcp://127.0.0.1:9998',&nbsp;recv_ident='')
      &nbsp;<br>
      &nbsp;<br>
      handler_test&nbsp;=&nbsp;Handler(send_spec='tcp://127.0.0.1:9997',
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send_ident='34f9ceee-cd52-4b7f-b197-88bf2f0ec378',
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recv_spec='tcp://127.0.0.1:9996',&nbsp;recv_ident='')
      &nbsp;<br>
      &nbsp;<br>
      &nbsp;<br>
      mongrel2&nbsp;=&nbsp;Host(name="mongrel2.org",&nbsp;routes={
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;'@chat':&nbsp;chat_demo, &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;'/handlertest':&nbsp;handler_test,
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;'/chat/':&nbsp;web_app_proxy,
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;'/':&nbsp;web_app_proxy, &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;'/tests/':&nbsp;test_directory,
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;'/testsmulti/(.&#8902;.json)':&nbsp;test_directory,
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;'/chatdemo/':&nbsp;chat_demo_dir,
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;'/static/':&nbsp;chat_demo_dir,
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;'/mp3stream':&nbsp;Handler(
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send_spec='tcp://127.0.0.1:9995',
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send_ident='53f9f1d1-1116-4751-b6ff-4fbe3e43d142',
      &nbsp;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recv_spec='tcp://127.0.0.1:9994',&nbsp;recv_ident='')
      &nbsp;<br>
      }) &nbsp;<br>
      &nbsp;<br>
      main.hosts&nbsp;=&nbsp;&#91;mongrel2&#93; &nbsp;<br>
      &nbsp;<br>
      settings&nbsp;=&nbsp;{"zeromq.threads":&nbsp;4} &nbsp;<br>
      &nbsp;<br>
      commit(&#91;main&#93;,&nbsp;settings=settings)
    </div><!--l. 426-->

    <p class="nopar">
  </div>
  <hr class="endfloat">
  <!--l. 429-->

  <p class="indent">If you haven&rsquo;t guessed yet, this
  configuration is what&rsquo;s used on <a href=
  "http://mongrel2.org" class="url"><span class=
  "pcrr7t-">http://mongrel2.org</span></a> to configure the main
  test system. In it we&rsquo;ve got the following things to check
  out:

  <ol class="enumerate1">
    <li class="enumerate" id="x1-32003x1">Our basic server with a
    default host of mongrel2.org.

    <li class="enumerate" id="x1-32005x2">The route targets are
    separated out into their own variables, unlike the <span class=
    "pplb7t-">sample&#729;conf.py</span> file where they&rsquo;re
    just tossed into one big structure.

    <li class="enumerate" id="x1-32007x3">First target is a
    <span class="pplri7t-">Dir</span> that serves up files out of
    the <span class="pplb7t-">tests</span> directory and uses
    <span class="pplb7t-">index.html</span> as its default file.

    <li class="enumerate" id="x1-32009x4">Next we setup a
    <span class="pplri7t-">Proxy</span> pointing at the main
    website&rsquo;s server for testing the proxy.

    <li class="enumerate" id="x1-32011x5">Then there&rsquo;s a
    <span class="pplri7t-">Dir</span> target for the <a href=
    "http://mongrel2.org:6767/chatdemo/" class="url"><span class=
    "pcrr7t-">http://mongrel2.org:6767/chatdemo/</span></a> that
    we&rsquo;ll look at later.

    <li class="enumerate" id="x1-32013x6">And you have the
    <span class="pplri7t-">Handler</span> for the same chat demo
    that does the actual logic of a chat system.

    <li class="enumerate" id="x1-32015x7">After that&rsquo;s a
    little <span class="pplri7t-">Handler</span> for testing out
    doing HTTP requests to a handler. Notice how even though the
    chat demo and this handler use different protocols (chat demo
    is using JSSockets) you don&rsquo;t have tell mongrel2 that? It
    figures it out based on how they&rsquo;re being used rather
    than by configurations.

    <li class="enumerate" id="x1-32017x8">With all those handler
    targets we can now make the <span class="pplri7t-">mongrel2
    Host</span> with all the routes assigned once and nice and
    clean. However look how I was lazy and just tossed the
    mp3stream demo right into the routes dict? You can totally do
    this and m2sh will figure it out.

    <li class="enumerate" id="x1-32019x9">We then assign this
    <span class="pplri7t-">mongrel2</span> variable as the hosts
    for the <span class="pplri7t-">main</span> server.

    <li class="enumerate" id="x1-32021x10">There is also a settings
    feature which is just a dict of global settings you can tweak.
    In this case we&rsquo;re upping the number of threads that 0MQ
    is using for doing it&rsquo;s operations.

    <li class="enumerate" id="x1-32023x11">Finally, we commit the
    whole thing to the database by passing in the servers to save
    and the settings to use.
  </ol><!--l. 454-->

  <p class="indent">And that my friends is the most complex
  configuration we have so far.

  <h3 class="sectionHead"><span class="titlemark">3.6</span> <a id=
  "x1-330003.6" name="x1-330003.6"></a>Routing And Host
  Patterns</h3><!--l. 459-->

  <p class="noindent">The pattern code was taken from <a href=
  "http://www.lua.org/">Lua</a> and is some of the simplest code
  for doing fast pattern matches. It is very much like regular
  expressions except it removes a lot of features you don&rsquo;t
  need for routes. How Mongrel2 to uses them is it takes routes and
  breaks them into a prefix and pattern part. It then uses routes
  to find the longest matching prefix and then tests the pattern.
  If the pattern matches then the route works. If the route
  doesn&rsquo;t have a pattern then it&rsquo;s assumed to match and
  you&rsquo;re done. <!--l. 466-->

  <p class="indent">The only caveat is you have to wrap your
  pattern parts in parenthesis, but these don&rsquo;t mean anything
  other than to delimit where a pattern starts. So instead of
  <span class="pplri7t-">/images/.*.jpg</span> write <span class=
  "pplri7t-">/images/(.*.jpg)</span> for it to work right. 
  <!--l. 470-->

  <p class="indent">Here&rsquo;s the list of characters you can use
  in your patterns:

  <ul class="itemize1">
    <li class="itemize">. (period) all characters.

    <li class="itemize">%a Letters.

    <li class="itemize">%c Control characters.

    <li class="itemize">%d Digits.

    <li class="itemize">%l Lowercase letters.

    <li class="itemize">%p Punctuation characters.

    <li class="itemize">%s Space characters.

    <li class="itemize">%u Uppercase letters.

    <li class="itemize">%w Alphanumeric characters.

    <li class="itemize">%x Hexadecimal digits.

    <li class="itemize">%z The<br class="newline">
    0 character (null terminator).

    <li class="itemize">%x Escapes x, so %% escapes %, %* escapes
    *.

    <li class="itemize">Just like a regex &#91;&rsquo; where it is a
    class of chars, like &#91;0-9&rsquo; for all digits.

    <li class="itemize">Inverse character set, so &#91;^0-9&#93; is
    anything not digits.

    <li class="itemize">x* Longest match of 0 or more x chars.

    <li class="itemize">x+ Longest match of 1 or more x chars.

    <li class="itemize">x- Shortest match of 0 or more x chars.

    <li class="itemize">x? 0 or 1 match of x char.

    <li class="itemize">%bxy Balanced match a substring starting
    with x and ending in y. So %b() will match balanced
    parenthesis.

    <li class="itemize">^ The beginning of a string.

    <li class="itemize">$ End of the string.
  </ul><!--l. 496-->

  <p class="indent">Anything that&rsquo;s not listed here just
  matches that character. <!--l. 499-->

  <p class="noindent">

  <h3 class="sectionHead"><span class="titlemark">3.7</span> <a id=
  "x1-340003.7" name="x1-340003.7"></a>Deployment Logs And
  Commits</h3>

  <h2 class="chapterHead"><span class=
  "titlemark">Chapter&nbsp;4</span><br>
  <a id="x1-350004" name="x1-350004"></a>Managing</h2>

  <h3 class="sectionHead"><span class="titlemark">4.1</span> <a id=
  "x1-360004.1" name="x1-360004.1"></a>More Advanced m2sh</h3>
  <!--l. 1-->

  <p class="indent">

  <h2 class="chapterHead"><span class=
  "titlemark">Chapter&nbsp;5</span><br>
  <a id="x1-370005" name="x1-370005"></a>Hacking</h2>

  <h3 class="sectionHead"><span class="titlemark">5.1</span> <a id=
  "x1-380005.1" name="x1-380005.1"></a>Writing Your Own m2sh</h3>
  <!--l. 1-->

  <p class="indent">

  <h2 class="chapterHead"><span class=
  "titlemark">Chapter&nbsp;6</span><br>
  <a id="x1-390006" name="x1-390006"></a>Contributing</h2>
  <!--l. 3-->

  <p class="noindent">Soon...

